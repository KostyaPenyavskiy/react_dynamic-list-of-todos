{"version":3,"sources":["helpers/api.ts","TodoCard/TodoCard.tsx","App.tsx","index.tsx"],"names":["getData","url","fetch","then","response","json","TodoCard","todo","className","title","type","checked","completed","disabled","user","name","App","useState","todos","setTodos","isLoading","setIsLoading","sortBy","setSortBy","loadData","a","todosFromServer","usersFromServer","todosWithUsers","map","find","id","userId","visibleTodos","sort","b","localeCompare","Number","getVisibleTodos","length","onClick","key","ReactDOM","render","document","getElementById"],"mappings":"iSAeMA,G,MAAU,SAAIC,GAClB,OAAOC,MAhBG,uCAgBSD,GAAKE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,YCTvCC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACvC,oCACE,wBAAIC,UAAU,eAAeD,EAAKE,OAClC,2BAAOC,KAAK,WAAWC,QAASJ,EAAKK,UAAWC,UAAQ,IACxD,4BAAQL,UAAU,cAAcD,EAAKO,KAAOP,EAAKO,KAAKC,KAAO,aC0ElDC,EA/DH,WAAO,IAAD,EACUC,mBAAiB,IAD3B,mBACTC,EADS,KACFC,EADE,OAEkBF,oBAAkB,GAFpC,mBAETG,EAFS,KAEEC,EAFF,OAGYJ,mBAAiB,IAH7B,mBAGTK,EAHS,KAGDC,EAHC,KAKVC,EAAQ,uCAAG,gCAAAC,EAAA,6DACfJ,GAAa,GADE,SFRWrB,EAAc,UEQzB,cAGT0B,EAHS,gBFPW1B,EAAc,UEOzB,OAIT2B,EAJS,OAMTC,EAAiBF,EAAgBG,KAAI,SAAAtB,GAAI,kCAC1CA,GAD0C,IAE7CO,KAAMa,EAAgBG,MAAK,SAAAhB,GAAI,OAAIA,EAAKiB,KAAOxB,EAAKyB,eAGtDb,EAASS,GACTP,GAAa,GAZE,4CAAH,qDAeRY,EApCgB,SAACf,EAAeI,GACtC,OAAQA,GACN,IAAK,QACH,OAAO,YAAIJ,GAAOgB,MAAK,SAACT,EAAGU,GAAJ,OAAUV,EAAEhB,MAAM2B,cAAcD,EAAE1B,UAE3D,IAAK,YACH,OAAO,YAAIS,GAAOgB,MAAK,SAACT,EAAGU,GAAJ,OAAUE,OAAOZ,EAAEb,WAAayB,OAAOF,EAAEvB,cAElE,IAAK,KACH,OAAO,YAAIM,GAAOgB,MAAK,SAACT,EAAGU,GAAJ,OAAUV,EAAEM,GAAKI,EAAEJ,MAE5C,QACE,OAAOb,GAwBUoB,CAAgBpB,EAAOI,GAE5C,OACE,oCACGW,EAAaM,OAAS,EAEnB,oCACE,6BACE,4BACE7B,KAAK,SACL8B,QAAS,kBAAMjB,EAAU,WAF3B,iBAMA,4BACEb,KAAK,SACL8B,QAAS,kBAAMjB,EAAU,eAF3B,kBAMA,4BACEb,KAAK,SACL8B,QAAS,kBAAMjB,EAAU,QAF3B,eAOF,4BACGU,EAAaJ,KAAI,SAAAtB,GAAI,OACpB,wBAAIkC,IAAKlC,EAAKwB,IACZ,kBAAC,EAAD,CAAUxB,KAAMA,UAOxB,4BAAQG,KAAK,SAAS8B,QAAShB,GAAYJ,EAAqB,UAAT,UC3EjEsB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.126be3c7.chunk.js","sourcesContent":["const URL = 'https://jsonplaceholder.typicode.com';\n\nexport interface User {\n  'id': number;\n  'name': string;\n}\n\nexport interface Todo {\n  'userId': number;\n  'id': number;\n  'title': string;\n  'completed': boolean;\n  'user'?: User;\n}\n\nconst getData = <T>(url: string): Promise<T[]> => {\n  return fetch(URL + url).then(response => response.json());\n};\n\nexport const getTodos = () => getData<Todo>('/todos');\nexport const getUsers = () => getData<User>('/users');\n","import React from 'react';\nimport { Todo } from '../helpers/api';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoCard: React.FC<Props> = ({ todo }) => (\n  <>\n    <h2 className=\"Todo__title\">{todo.title}</h2>\n    <input type=\"checkbox\" checked={todo.completed} disabled />\n    <strong className=\"Todo__user\">{todo.user ? todo.user.name : 'Unknown'}</strong>\n  </>\n);\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport { getTodos, getUsers, Todo } from './helpers/api';\nimport { TodoCard } from './TodoCard/TodoCard';\n\nconst getVisibleTodos = (todos: Todo[], sortBy: string) => {\n  switch (sortBy) {\n    case 'title':\n      return [...todos].sort((a, b) => a.title.localeCompare(b.title));\n\n    case 'completed':\n      return [...todos].sort((a, b) => Number(a.completed) - Number(b.completed));\n\n    case 'id':\n      return [...todos].sort((a, b) => a.id - b.id);\n\n    default:\n      return todos;\n  }\n};\n\nconst App = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [sortBy, setSortBy] = useState<string>('');\n\n  const loadData = async () => {\n    setIsLoading(true);\n\n    const todosFromServer = await getTodos();\n    const usersFromServer = await getUsers();\n\n    const todosWithUsers = todosFromServer.map(todo => ({\n      ...todo,\n      user: usersFromServer.find(user => user.id === todo.userId),\n    }));\n\n    setTodos(todosWithUsers);\n    setIsLoading(false);\n  };\n\n  const visibleTodos = getVisibleTodos(todos, sortBy);\n\n  return (\n    <>\n      {visibleTodos.length > 0\n        ? (\n          <>\n            <div>\n              <button\n                type=\"button\"\n                onClick={() => setSortBy('title')}\n              >\n                Sort by Title\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setSortBy('completed')}\n              >\n                Sort by status\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => setSortBy('id')}\n              >\n                Sort by id\n              </button>\n            </div>\n            <ul>\n              {visibleTodos.map(todo => (\n                <li key={todo.id}>\n                  <TodoCard todo={todo} />\n                </li>\n              ))}\n            </ul>\n          </>\n        )\n        : (\n          <button type=\"button\" onClick={loadData}>{!isLoading ? 'Load' : 'Loading'}</button>\n        )}\n    </>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}